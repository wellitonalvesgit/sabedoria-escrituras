-- =============================================
-- CORRE√á√ÉO COMPLETA DE AUTENTICA√á√ÉO E RLS
-- Sistema: Sabedoria das Escrituras
-- Data: 2025-10-26
-- =============================================

-- Este script corrige todos os problemas de autentica√ß√£o e RLS (Row Level Security)
-- identificados no sistema, especialmente:
-- 1. Usu√°rios comuns n√£o conseguiam ver seu pr√≥prio perfil
-- 2. Pol√≠ticas de RLS impediam acesso ao pr√≥prio registro
-- 3. Problemas com edi√ß√£o de perfil

-- =============================================
-- PARTE 1: LIMPAR POL√çTICAS ANTIGAS
-- =============================================

-- Remover todas as pol√≠ticas existentes da tabela users
DROP POLICY IF EXISTS "Usu√°rios s√≥ podem ver seus pr√≥prios dados" ON public.users;
DROP POLICY IF EXISTS "Usu√°rios s√≥ podem editar seus pr√≥prios dados" ON public.users;
DROP POLICY IF EXISTS "Administradores podem ver todos os usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem editar todos os usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem inserir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem excluir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Servi√ßo de autentica√ß√£o pode inserir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Users can view their own profile" ON public.users;
DROP POLICY IF EXISTS "Users can update their own profile" ON public.users;
DROP POLICY IF EXISTS "Admins can view all profiles" ON public.users;
DROP POLICY IF EXISTS "Admins can update all profiles" ON public.users;

-- =============================================
-- PARTE 2: GARANTIR QUE RLS EST√Å HABILITADO
-- =============================================

ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- =============================================
-- PARTE 3: CRIAR NOVAS POL√çTICAS CORRETAS
-- =============================================

-- 1. POL√çTICA DE LEITURA (SELECT)
-- Usu√°rios podem ver:
-- - Seu pr√≥prio perfil
-- - Todos os perfis se forem admin

CREATE POLICY "users_select_own_or_admin"
ON public.users
FOR SELECT
USING (
  auth.uid() = id OR -- Pode ver seu pr√≥prio perfil
  EXISTS ( -- OU √© admin e pode ver todos
    SELECT 1 FROM public.users
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- 2. POL√çTICA DE ATUALIZA√á√ÉO (UPDATE)
-- Usu√°rios podem atualizar:
-- - Seu pr√≥prio perfil
-- - Qualquer perfil se forem admin

CREATE POLICY "users_update_own_or_admin"
ON public.users
FOR UPDATE
USING (
  auth.uid() = id OR -- Pode atualizar seu pr√≥prio perfil
  EXISTS ( -- OU √© admin e pode atualizar todos
    SELECT 1 FROM public.users
    WHERE id = auth.uid()
    AND role = 'admin'
  )
)
WITH CHECK (
  auth.uid() = id OR -- Pode atualizar seu pr√≥prio perfil
  EXISTS ( -- OU √© admin e pode atualizar todos
    SELECT 1 FROM public.users
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- 3. POL√çTICA DE INSER√á√ÉO (INSERT)
-- Permitir inser√ß√£o de novos usu√°rios:
-- - Durante o signup (auth.uid() = id)
-- - Por administradores

CREATE POLICY "users_insert_signup_or_admin"
ON public.users
FOR INSERT
WITH CHECK (
  auth.uid() = id OR -- Registro pr√≥prio durante signup
  EXISTS ( -- OU √© admin inserindo novo usu√°rio
    SELECT 1 FROM public.users
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- 4. POL√çTICA DE EXCLUS√ÉO (DELETE)
-- Apenas administradores podem excluir usu√°rios

CREATE POLICY "users_delete_admin_only"
ON public.users
FOR DELETE
USING (
  EXISTS (
    SELECT 1 FROM public.users
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- =============================================
-- PARTE 4: VERIFICAR E CORRIGIR DADOS DO USU√ÅRIO
-- =============================================

-- Garantir que o usu√°rio geisonhoehr.ai@gmail.com tenha dados corretos
UPDATE public.users
SET
  status = 'active',
  role = COALESCE(role, 'student'),
  access_days = COALESCE(access_days, 30),
  access_expires_at = CASE
    WHEN access_expires_at IS NULL OR access_expires_at < NOW()
    THEN NOW() + INTERVAL '365 days'
    ELSE access_expires_at
  END,
  updated_at = NOW()
WHERE email = 'geisonhoehr.ai@gmail.com';

-- =============================================
-- PARTE 5: VERIFICA√á√ïES E LOGS
-- =============================================

-- Verificar se as pol√≠ticas foram criadas corretamente
DO $$
BEGIN
  RAISE NOTICE '‚úÖ Pol√≠ticas RLS criadas com sucesso!';
  RAISE NOTICE 'üìä Total de pol√≠ticas na tabela users: %',
    (SELECT COUNT(*) FROM pg_policies WHERE tablename = 'users');
END $$;

-- Verificar status do usu√°rio teste
DO $$
DECLARE
  user_record RECORD;
BEGIN
  SELECT * INTO user_record FROM public.users WHERE email = 'geisonhoehr.ai@gmail.com';

  IF FOUND THEN
    RAISE NOTICE '‚úÖ Usu√°rio encontrado: %', user_record.email;
    RAISE NOTICE '   - Status: %', user_record.status;
    RAISE NOTICE '   - Role: %', user_record.role;
    RAISE NOTICE '   - Access Days: %', user_record.access_days;
    RAISE NOTICE '   - Access Expires: %', user_record.access_expires_at;
  ELSE
    RAISE NOTICE '‚ùå Usu√°rio n√£o encontrado';
  END IF;
END $$;

-- =============================================
-- DOCUMENTA√á√ÉO
-- =============================================

-- COMO FUNCIONA O RLS AGORA:
--
-- 1. LEITURA (SELECT):
--    - Usu√°rio comum: Pode ver APENAS seu pr√≥prio registro
--    - Admin: Pode ver TODOS os registros
--
-- 2. ATUALIZA√á√ÉO (UPDATE):
--    - Usu√°rio comum: Pode atualizar APENAS seu pr√≥prio registro
--    - Admin: Pode atualizar TODOS os registros
--
-- 3. INSER√á√ÉO (INSERT):
--    - Durante signup: Usu√°rio pode criar seu pr√≥prio registro
--    - Admin: Pode criar registros para outros usu√°rios
--
-- 4. EXCLUS√ÉO (DELETE):
--    - Apenas admins podem excluir usu√°rios
--
-- IMPORTANTE:
-- - Pol√≠ticas usam auth.uid() que retorna o ID do usu√°rio autenticado
-- - RLS √© aplicado ANTES da query ser executada
-- - Service Role Key bypassa RLS (usado em APIs server-side)
