-- =============================================
-- CORRE√á√ÉO DEFINITIVA DE RLS - SEM RECURS√ÉO
-- Sistema: Sabedoria das Escrituras
-- Data: 2025-10-26
-- =============================================

-- PROBLEMA IDENTIFICADO:
-- As pol√≠ticas com EXISTS() causam recurs√£o infinita porque
-- consultam a pr√≥pria tabela users dentro da pol√≠tica de users

-- SOLU√á√ÉO:
-- Usar pol√≠ticas mais simples que verificam apenas auth.uid()
-- Para admins, criar uma fun√ß√£o helper que n√£o causa recurs√£o

-- =============================================
-- PARTE 1: LIMPAR TUDO
-- =============================================

-- Remover TODAS as pol√≠ticas existentes
DROP POLICY IF EXISTS "Usu√°rios s√≥ podem ver seus pr√≥prios dados" ON public.users;
DROP POLICY IF EXISTS "Usu√°rios s√≥ podem editar seus pr√≥prios dados" ON public.users;
DROP POLICY IF EXISTS "Administradores podem ver todos os usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem editar todos os usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem inserir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem excluir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Servi√ßo de autentica√ß√£o pode inserir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Users can view their own profile" ON public.users;
DROP POLICY IF EXISTS "Users can update their own profile" ON public.users;
DROP POLICY IF EXISTS "Admins can view all profiles" ON public.users;
DROP POLICY IF EXISTS "Admins can update all profiles" ON public.users;
DROP POLICY IF EXISTS "users_select_own_or_admin" ON public.users;
DROP POLICY IF EXISTS "users_update_own_or_admin" ON public.users;
DROP POLICY IF EXISTS "users_insert_signup_or_admin" ON public.users;
DROP POLICY IF EXISTS "users_delete_admin_only" ON public.users;

-- =============================================
-- PARTE 2: CRIAR FUN√á√ÉO HELPER (SEM RECURS√ÉO)
-- =============================================

-- Esta fun√ß√£o verifica se o usu√°rio √© admin SEM causar recurs√£o
-- usando uma query direta ao auth.users
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS BOOLEAN AS $$
BEGIN
  -- Verifica se existe um usu√°rio com este ID e role admin
  -- Usando SECURITY DEFINER para executar com privil√©gios do owner
  RETURN EXISTS (
    SELECT 1
    FROM public.users
    WHERE id = auth.uid()
    AND role = 'admin'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- =============================================
-- PARTE 3: DESABILITAR RLS TEMPORARIAMENTE
-- =============================================

ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;

-- =============================================
-- PARTE 4: CRIAR POL√çTICAS SIMPLES (SEM RECURS√ÉO)
-- =============================================

-- Reabilitar RLS
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- 1. SELECT - Ver pr√≥prio perfil OU ser admin
CREATE POLICY "users_select_policy"
ON public.users
FOR SELECT
USING (
  auth.uid() = id OR
  (SELECT role FROM public.users WHERE id = auth.uid() LIMIT 1) = 'admin'
);

-- 2. UPDATE - Atualizar pr√≥prio perfil OU ser admin
CREATE POLICY "users_update_policy"
ON public.users
FOR UPDATE
USING (
  auth.uid() = id OR
  (SELECT role FROM public.users WHERE id = auth.uid() LIMIT 1) = 'admin'
)
WITH CHECK (
  auth.uid() = id OR
  (SELECT role FROM public.users WHERE id = auth.uid() LIMIT 1) = 'admin'
);

-- 3. INSERT - Criar pr√≥pria conta durante signup OU ser admin
CREATE POLICY "users_insert_policy"
ON public.users
FOR INSERT
WITH CHECK (
  auth.uid() = id OR
  (SELECT role FROM public.users WHERE id = auth.uid() LIMIT 1) = 'admin'
);

-- 4. DELETE - Apenas admins
CREATE POLICY "users_delete_policy"
ON public.users
FOR DELETE
USING (
  (SELECT role FROM public.users WHERE id = auth.uid() LIMIT 1) = 'admin'
);

-- =============================================
-- PARTE 5: CORRIGIR DADOS DO USU√ÅRIO
-- =============================================

-- Temporariamente desabilitar RLS para UPDATE
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;

-- Atualizar usu√°rio teste
UPDATE public.users
SET
  status = 'active',
  role = COALESCE(role, 'student'),
  access_days = COALESCE(access_days, 30),
  access_expires_at = CASE
    WHEN access_expires_at IS NULL OR access_expires_at < NOW()
    THEN NOW() + INTERVAL '365 days'
    ELSE access_expires_at
  END,
  updated_at = NOW()
WHERE email = 'geisonhoehr.ai@gmail.com';

-- Reabilitar RLS
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- =============================================
-- PARTE 6: VERIFICA√á√ïES
-- =============================================

DO $$
DECLARE
  policy_count INTEGER;
  user_record RECORD;
BEGIN
  -- Contar pol√≠ticas
  SELECT COUNT(*) INTO policy_count
  FROM pg_policies
  WHERE tablename = 'users';

  RAISE NOTICE '‚úÖ Script executado com sucesso!';
  RAISE NOTICE 'üìä Total de pol√≠ticas RLS: %', policy_count;

  -- Verificar usu√°rio
  SELECT * INTO user_record
  FROM public.users
  WHERE email = 'geisonhoehr.ai@gmail.com';

  IF FOUND THEN
    RAISE NOTICE '‚úÖ Usu√°rio: %', user_record.email;
    RAISE NOTICE '   Status: %', user_record.status;
    RAISE NOTICE '   Role: %', user_record.role;
    RAISE NOTICE '   Expira: %', user_record.access_expires_at;
  ELSE
    RAISE NOTICE '‚ùå Usu√°rio n√£o encontrado';
  END IF;
END $$;

-- =============================================
-- DOCUMENTA√á√ÉO
-- =============================================

-- COMO FUNCIONA AGORA:
--
-- 1. Pol√≠ticas N√ÉO usam EXISTS() para evitar recurs√£o
-- 2. Usam subquery direta com LIMIT 1
-- 3. Fun√ß√£o helper is_admin() com SECURITY DEFINER
-- 4. RLS √© desabilitado temporariamente para UPDATE administrativo
--
-- PERMISS√ïES:
-- - Usu√°rio comum: Ver e editar APENAS seu pr√≥prio perfil
-- - Admin: Ver e editar TODOS os perfis
-- - Signup: Criar pr√≥pria conta
-- - Delete: Apenas admins
