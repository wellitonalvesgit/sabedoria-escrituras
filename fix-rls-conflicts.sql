-- Script para corrigir conflitos nas pol√≠ticas RLS
-- Este script remove pol√≠ticas conflitantes e garante que apenas as pol√≠ticas corretas existam

-- 1. Verificar pol√≠ticas atuais
DO $$
BEGIN
    RAISE NOTICE 'üîç Verificando pol√≠ticas RLS atuais na tabela users...';
END $$;

-- 2. Desativar RLS temporariamente para fazer as altera√ß√µes
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;

-- 3. Remover pol√≠ticas conflitantes
DROP POLICY IF EXISTS "Users can view all users" ON public.users;
DROP POLICY IF EXISTS "Users can insert own profile" ON public.users;
DROP POLICY IF EXISTS "Users can update own profile" ON public.users;

-- 4. Verificar se as pol√≠ticas corretas existem, se n√£o, cri√°-las
DO $$
BEGIN
    -- Verificar pol√≠tica de visualiza√ß√£o
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'users' AND policyname = 'users_can_view_own'
    ) THEN
        RAISE NOTICE 'Criando pol√≠tica users_can_view_own...';
        
        EXECUTE 'CREATE POLICY "users_can_view_own" 
                ON public.users 
                FOR SELECT 
                USING (auth.uid() = id)';
    END IF;
    
    -- Verificar pol√≠tica de atualiza√ß√£o
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'users' AND policyname = 'users_can_update_own'
    ) THEN
        RAISE NOTICE 'Criando pol√≠tica users_can_update_own...';
        
        EXECUTE 'CREATE POLICY "users_can_update_own" 
                ON public.users 
                FOR UPDATE 
                USING (auth.uid() = id) 
                WITH CHECK (auth.uid() = id)';
    END IF;
    
    -- Verificar pol√≠tica de inser√ß√£o
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'users' AND policyname = 'users_can_insert_own'
    ) THEN
        RAISE NOTICE 'Criando pol√≠tica users_can_insert_own...';
        
        EXECUTE 'CREATE POLICY "users_can_insert_own" 
                ON public.users 
                FOR INSERT 
                WITH CHECK (auth.uid() = id)';
    END IF;
END $$;

-- 5. Reativar RLS
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- 6. Verificar pol√≠ticas ap√≥s as altera√ß√µes
DO $$
DECLARE
    policy_record RECORD;
BEGIN
    RAISE NOTICE '‚úÖ Pol√≠ticas RLS atualizadas com sucesso!';
    RAISE NOTICE 'Pol√≠ticas atuais na tabela users:';
    
    FOR policy_record IN 
        SELECT policyname, cmd, qual
        FROM pg_policies
        WHERE tablename = 'users'
        ORDER BY policyname
    LOOP
        RAISE NOTICE '- %: % (%)', 
            policy_record.policyname, 
            policy_record.cmd, 
            policy_record.qual;
    END LOOP;
END $$;

-- 7. Verificar acesso do usu√°rio
DO $$
DECLARE
    user_id TEXT;
    user_email TEXT;
    user_role TEXT;
    user_status TEXT;
    allowed_courses_count INTEGER;
BEGIN
    -- Buscar dados do usu√°rio
    SELECT 
        id, email, role, status, array_length(allowed_courses, 1)
    INTO 
        user_id, user_email, user_role, user_status, allowed_courses_count
    FROM public.users
    WHERE email = 'geisonhoehr.ai@gmail.com';
    
    IF user_id IS NULL THEN
        RAISE NOTICE '‚ùå Usu√°rio n√£o encontrado na tabela public.users';
    ELSE
        RAISE NOTICE '‚úÖ Usu√°rio encontrado: ID=%, Email=%, Role=%, Status=%, Cursos permitidos=%',
            user_id, user_email, user_role, user_status, allowed_courses_count;
    END IF;
END $$;
