/**
 * Script para invalidar TODAS as sess√µes de um usu√°rio espec√≠fico
 * Isso for√ßa o usu√°rio a fazer login novamente com os dados atualizados
 */

import { config } from 'dotenv'
import { createClient } from '@supabase/supabase-js'

// Carregar vari√°veis de ambiente
config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('‚ùå Erro: Vari√°veis de ambiente n√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

const userEmail = 'geisonhoehr@gmail.com'

async function invalidateAllSessions() {
  try {
    console.log('üöÄ Invalidando todas as sess√µes...\n')

    // 1. Buscar usu√°rio
    const { data: users } = await supabase
      .from('users')
      .select('id, email, name, role')
      .eq('email', userEmail)
      .single()

    if (!users) {
      console.error(`‚ùå Usu√°rio ${userEmail} n√£o encontrado`)
      return
    }

    console.log('‚úÖ Usu√°rio encontrado:')
    console.log(`   ID: ${users.id}`)
    console.log(`   Email: ${users.email}`)
    console.log(`   Nome: ${users.name}`)
    console.log(`   Role: ${users.role}\n`)

    // 2. Usar API Admin para sign out de TODAS as sess√µes
    console.log('üîÑ Invalidando sess√µes via Admin API...')

    const { error } = await supabase.auth.admin.signOut(users.id, 'global')

    if (error) {
      console.error('‚ùå Erro ao invalidar sess√µes:', error.message)
      console.log('\n‚ö†Ô∏è  M√©todo 1 falhou. Tentando m√©todo alternativo...\n')

      // M√©todo alternativo: Atualizar updated_at do usu√°rio para for√ßar revalida√ß√£o
      const { error: updateError } = await supabase.auth.admin.updateUserById(
        users.id,
        {
          user_metadata: {
            name: users.name,
            role: users.role,
            email_verified: true,
            force_logout: new Date().toISOString() // Timestamp para for√ßar revalida√ß√£o
          }
        }
      )

      if (updateError) {
        console.error('‚ùå Erro no m√©todo alternativo:', updateError.message)
        console.log('\n‚ö†Ô∏è  SOLU√á√ÉO: O usu√°rio DEVE fazer logout manualmente e login novamente\n')
        return
      }

      console.log('‚úÖ Metadata atualizada com timestamp de for√ßa de logout')
      console.log('‚ö†Ô∏è  Usu√°rio DEVE fazer logout e login para pegar nova sess√£o\n')
      return
    }

    console.log('‚úÖ Todas as sess√µes foram invalidadas!')
    console.log('\nüìã PR√ìXIMOS PASSOS:')
    console.log('1. O usu√°rio ser√° deslogado automaticamente')
    console.log('2. Ao fazer login novamente, ver√° role=admin corretamente')
    console.log('3. O painel administrativo aparecer√°\n')

  } catch (error) {
    console.error('‚ùå Erro:', error.message)
  }
}

invalidateAllSessions()
