require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function setup3Plans() {
  console.log('\nüöÄ CONFIGURANDO OS 3 PLANOS DE ASSINATURA\n')
  console.log('='  .repeat(60))

  // 1. Adicionar campo duration_days se n√£o existir
  console.log('\n1Ô∏è‚É£ Verificando campo duration_days...')
  console.log('   ‚ö†Ô∏è  Campo duration_days ser√° adicionado manualmente se necess√°rio')
  console.log('   (Este campo armazena a dura√ß√£o do plano em dias, null = ilimitado)')

  // 2. Deletar planos antigos
  console.log('\n2Ô∏è‚É£ Removendo planos antigos...')
  const { error: deleteError } = await supabase
    .from('subscription_plans')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000') // delete all

  if (deleteError) {
    console.log('   ‚ö†Ô∏è  Erro ao deletar (pode ser que n√£o tenha nenhum):', deleteError.message)
  } else {
    console.log('   ‚úÖ Planos antigos removidos')
  }

  // 3. Criar os 3 novos planos
  console.log('\n3Ô∏è‚É£ Criando os 3 novos planos...')

  const newPlans = [
    {
      name: 'free-trial',
      display_name: 'üÜì Free Trial',
      description: 'Teste gratuito por 7 dias - Acesso apenas a cursos gratuitos',
      price_monthly: 0,
      price_yearly: 0,
      trial_days: 7,
      duration_days: 7,
      features: [
        '‚úÖ 7 dias de acesso',
        '‚úÖ Cursos gratuitos apenas',
        '‚úÖ Sistema de gamifica√ß√£o',
        '‚úÖ Suporte por email'
      ],
      is_active: true,
      sort_order: 1
    },
    {
      name: 'basico',
      display_name: 'üì¶ B√°sico',
      description: 'Acesso completo por 2 meses - Ideal para estudar cursos espec√≠ficos',
      price_monthly: 49.90,
      price_yearly: 0,
      trial_days: 0,
      duration_days: 60, // 2 meses = 60 dias
      features: [
        '‚úÖ 60 dias de acesso (2 meses)',
        '‚úÖ TODOS os cursos',
        '‚úÖ Sistema de marca√ß√£o (Kindle)',
        '‚úÖ Sistema de gamifica√ß√£o',
        '‚úÖ Certificados de conclus√£o',
        '‚úÖ Suporte priorit√°rio'
      ],
      is_active: true,
      sort_order: 2
    },
    {
      name: 'premium',
      display_name: 'üíé Premium',
      description: 'Acesso ILIMITADO - Melhor custo-benef√≠cio para estudantes cont√≠nuos',
      price_monthly: 29.90,
      price_yearly: 297.00, // ~24,75/m√™s (economiza 17%)
      trial_days: 0,
      duration_days: null, // null = ilimitado
      features: [
        '‚úÖ Acesso ILIMITADO vital√≠cio',
        '‚úÖ TODOS os cursos',
        '‚úÖ Novos cursos todo m√™s',
        '‚úÖ Sistema de marca√ß√£o (Kindle)',
        '‚úÖ Sistema de gamifica√ß√£o',
        '‚úÖ Certificados de conclus√£o',
        '‚úÖ Downloads ilimitados',
        '‚úÖ Suporte priorit√°rio',
        'üí∞ Pague mensal ou anual (17% desconto)'
      ],
      is_active: true,
      sort_order: 3
    }
  ]

  for (const plan of newPlans) {
    const { data, error } = await supabase
      .from('subscription_plans')
      .insert(plan)
      .select()
      .single()

    if (error) {
      console.log(`   ‚ùå Erro ao criar plano "${plan.display_name}":`, error.message)
    } else {
      console.log(`   ‚úÖ Plano "${plan.display_name}" criado com sucesso!`)
      console.log(`      ID: ${data.id}`)
      console.log(`      Pre√ßo mensal: R$ ${plan.price_monthly}`)
      console.log(`      Pre√ßo anual: R$ ${plan.price_yearly}`)
      console.log(`      Dura√ß√£o: ${plan.duration_days ? plan.duration_days + ' dias' : 'ILIMITADO'}`)
    }
  }

  // 4. Listar planos criados
  console.log('\n4Ô∏è‚É£ Verificando planos criados...')
  const { data: allPlans, error: listError } = await supabase
    .from('subscription_plans')
    .select('*')
    .order('sort_order', { ascending: true })

  if (listError) {
    console.log('   ‚ùå Erro ao listar planos:', listError.message)
  } else {
    console.log('\nüìã PLANOS CONFIGURADOS:\n')
    allPlans.forEach((plan, idx) => {
      console.log(`${idx + 1}. ${plan.display_name}`)
      console.log(`   Nome t√©cnico: ${plan.name}`)
      console.log(`   Descri√ß√£o: ${plan.description}`)
      console.log(`   Pre√ßo mensal: R$ ${plan.price_monthly}`)
      console.log(`   Pre√ßo anual: R$ ${plan.price_yearly}`)
      console.log(`   Trial: ${plan.trial_days} dias`)
      console.log(`   Dura√ß√£o: ${plan.duration_days ? plan.duration_days + ' dias' : 'ILIMITADO ‚ôæÔ∏è'}`)
      console.log(`   Features: ${plan.features.length} itens`)
      console.log(`   Status: ${plan.is_active ? '‚úÖ Ativo' : '‚ùå Inativo'}`)
      console.log()
    })
  }

  console.log('='  .repeat(60))
  console.log('\n‚úÖ Configura√ß√£o dos 3 planos conclu√≠da!\n')
  console.log('üìù Pr√≥ximos passos:')
  console.log('   1. Criar p√°gina /admin/plans para gerenciar planos')
  console.log('   2. Atualizar /pricing com os 3 planos')
  console.log('   3. Atualizar l√≥gica de subscription-helper.ts')
  console.log()
}

setup3Plans().catch(console.error)
