-- =============================================
-- CORRE√á√ÉO DEFINITIVA - RLS SIMPLES (SEM RECURS√ÉO)
-- Sistema: Sabedoria das Escrituras
-- Data: 2025-10-26
-- =============================================

-- SOLU√á√ÉO DEFINITIVA:
-- Pol√≠ticas MUITO SIMPLES que verificam apenas auth.uid() = id
-- SEM subqueries, SEM EXISTS, SEM recurs√£o
-- Admins usar√£o SERVICE_ROLE_KEY que bypassa RLS

-- =============================================
-- PARTE 1: LIMPAR TUDO
-- =============================================

-- Desabilitar RLS temporariamente
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;

-- Remover TODAS as pol√≠ticas
DROP POLICY IF EXISTS "Usu√°rios s√≥ podem ver seus pr√≥prios dados" ON public.users;
DROP POLICY IF EXISTS "Usu√°rios s√≥ podem editar seus pr√≥prios dados" ON public.users;
DROP POLICY IF EXISTS "Administradores podem ver todos os usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem editar todos os usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem inserir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Administradores podem excluir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Servi√ßo de autentica√ß√£o pode inserir usu√°rios" ON public.users;
DROP POLICY IF EXISTS "Users can view their own profile" ON public.users;
DROP POLICY IF EXISTS "Users can update their own profile" ON public.users;
DROP POLICY IF EXISTS "Admins can view all profiles" ON public.users;
DROP POLICY IF EXISTS "Admins can update all profiles" ON public.users;
DROP POLICY IF EXISTS "users_select_own_or_admin" ON public.users;
DROP POLICY IF EXISTS "users_update_own_or_admin" ON public.users;
DROP POLICY IF EXISTS "users_insert_signup_or_admin" ON public.users;
DROP POLICY IF EXISTS "users_delete_admin_only" ON public.users;
DROP POLICY IF EXISTS "users_select_policy" ON public.users;
DROP POLICY IF EXISTS "users_update_policy" ON public.users;
DROP POLICY IF EXISTS "users_insert_policy" ON public.users;
DROP POLICY IF EXISTS "users_delete_policy" ON public.users;

-- =============================================
-- PARTE 2: ATUALIZAR DADOS DO USU√ÅRIO
-- =============================================

-- Aproveitar que RLS est√° desabilitado para atualizar
UPDATE public.users
SET
  status = 'active',
  role = COALESCE(role, 'student'),
  access_days = COALESCE(access_days, 30),
  access_expires_at = CASE
    WHEN access_expires_at IS NULL OR access_expires_at < NOW()
    THEN NOW() + INTERVAL '365 days'
    ELSE access_expires_at
  END,
  updated_at = NOW()
WHERE email = 'geisonhoehr.ai@gmail.com';

-- =============================================
-- PARTE 3: CRIAR POL√çTICAS SUPER SIMPLES
-- =============================================

-- Reabilitar RLS
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- POL√çTICA 1: SELECT - Ver APENAS pr√≥prio perfil
-- Admins usar√£o SERVICE_ROLE_KEY que bypassa RLS
DROP POLICY IF EXISTS "users_can_view_own" ON public.users;
CREATE POLICY "users_can_view_own"
ON public.users
FOR SELECT
USING (auth.uid() = id);

-- POL√çTICA 2: UPDATE - Atualizar APENAS pr√≥prio perfil
-- Admins usar√£o SERVICE_ROLE_KEY que bypassa RLS
DROP POLICY IF EXISTS "users_can_update_own" ON public.users;
CREATE POLICY "users_can_update_own"
ON public.users
FOR UPDATE
USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- POL√çTICA 3: INSERT - Criar pr√≥pria conta durante signup
-- Admins usar√£o SERVICE_ROLE_KEY que bypassa RLS
DROP POLICY IF EXISTS "users_can_insert_own" ON public.users;
CREATE POLICY "users_can_insert_own"
ON public.users
FOR INSERT
WITH CHECK (auth.uid() = id);

-- POL√çTICA 4: DELETE - Ningu√©m pode deletar via RLS
-- Admins usar√£o SERVICE_ROLE_KEY que bypassa RLS
-- N√£o criar pol√≠tica de DELETE = ningu√©m pode deletar com RLS ativo

-- =============================================
-- PARTE 4: VERIFICA√á√ïES
-- =============================================

DO $$
DECLARE
  policy_count INTEGER;
  user_record RECORD;
  rls_enabled BOOLEAN;
BEGIN
  -- Verificar se RLS est√° habilitado
  SELECT relrowsecurity INTO rls_enabled
  FROM pg_class
  WHERE relname = 'users';

  RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
  RAISE NOTICE '‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!';
  RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
  RAISE NOTICE '';

  -- Contar pol√≠ticas
  SELECT COUNT(*) INTO policy_count
  FROM pg_policies
  WHERE tablename = 'users';

  RAISE NOTICE 'üìä RLS Status: %', CASE WHEN rls_enabled THEN 'HABILITADO ‚úÖ' ELSE 'DESABILITADO ‚ùå' END;
  RAISE NOTICE 'üìä Total de pol√≠ticas: %', policy_count;
  RAISE NOTICE '';

  -- Listar pol√≠ticas
  RAISE NOTICE 'üìã Pol√≠ticas criadas:';
  FOR user_record IN
    SELECT policyname, cmd
    FROM pg_policies
    WHERE tablename = 'users'
    ORDER BY policyname
  LOOP
    RAISE NOTICE '   - % (%)', user_record.policyname, user_record.cmd;
  END LOOP;

  RAISE NOTICE '';

  -- Verificar usu√°rio teste
  SELECT * INTO user_record
  FROM public.users
  WHERE email = 'geisonhoehr.ai@gmail.com';

  IF FOUND THEN
    RAISE NOTICE '‚úÖ Usu√°rio teste configurado:';
    RAISE NOTICE '   Email: %', user_record.email;
    RAISE NOTICE '   Status: %', user_record.status;
    RAISE NOTICE '   Role: %', user_record.role;
    RAISE NOTICE '   Access Days: %', user_record.access_days;
    RAISE NOTICE '   Access Expires: %', user_record.access_expires_at;
  ELSE
    RAISE NOTICE '‚ùå Usu√°rio teste N√ÉO encontrado!';
  END IF;

  RAISE NOTICE '';
  RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
  RAISE NOTICE 'üéØ PR√ìXIMOS PASSOS:';
  RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
  RAISE NOTICE '1. Reinicie o servidor: npm run dev';
  RAISE NOTICE '2. Execute teste: node test-user-flow.js';
  RAISE NOTICE '3. Teste no navegador: http://localhost:3000/login';
  RAISE NOTICE '   Email: geisonhoehr.ai@gmail.com';
  RAISE NOTICE '   Senha: 123456';
  RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
END $$;

-- =============================================
-- DOCUMENTA√á√ÉO FINAL
-- =============================================

-- COMO FUNCIONA:
--
-- 1. Pol√≠ticas SIMPLES: Apenas auth.uid() = id
-- 2. SEM recurs√£o, SEM subqueries, SEM EXISTS
-- 3. Usu√°rios comuns: Veem e editam APENAS seu pr√≥prio perfil
-- 4. Admins: Usam SERVICE_ROLE_KEY que bypassa RLS
--
-- IMPORTANTE:
-- - Middleware usa SERVICE_ROLE_KEY (j√° configurado)
-- - APIs administrativas usam SERVICE_ROLE_KEY
-- - Cliente usa ANON_KEY com RLS ativo
-- - Sistema seguro e sem recurs√£o!
